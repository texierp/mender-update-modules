#!/bin/bash

set -e

show_help() {
  cat << EOF

Simple tool to generate Mender Artifact suitable for dir-overlay Update Module

Usage: $0 [options] file-tree [-- [options-for-mender-artifact] ]

    Options: [ -n|artifact-name -t|--device-type -d|--dest-dir -o|--output_path -h|--help ]

        --artifact-name     - Artifact name
        --device-type       - Target device type identification
        --dest-dir          - Target destination directory where to deploy the update (Defaults to "/")
        --output-path       - Path to output file. Default: file-install-artifact.mender
        --help              - Show help and exit
        file-tree           - Directory tree to bundle in the update

Anything after a '--' gets passed directly to the mender-artifact tool.

Common use-case for the dir-overlay is to install files overlayed
on the root file-system.

Example tree to deploy:

    $ tree
    .
    ├── etc
    │   └── app.conf
    └── usr
        ├── bin
        │   └── app
        └── share
            └── app
                └── data.txt

EOF
}

show_help_and_exit_error() {
  show_help
  exit 1
}

check_dependency() {
  hash "$1" || \
        (echo "Fatal error: $1 not found in PATH." && exit 1)
}

check_dependency mender-artifact

device_type=""
artifact_name=""
dest_dir="/"
dest_dir_file="dest_dir"
output_path="file-install-artifact.mender"
update_files_tar="update.tar"
directories_file="directories"
manifest_file="manifest"
file_tree=""
passthrough=0
passthrough_args=""
permissions_file="permissions"

while (( "$#" )); do
  if test $passthrough -eq 1
  then
    passthrough_args="$passthrough_args $1"
    shift
    continue
  fi
  case "$1" in
    --device-type | -t)
      if [ -z "$2" ]; then
        show_help_and_exit_error
      fi
      device_type=$2
      shift 2
      ;;
    --artifact-name | -n)
      if [ -z "$2" ]; then
        show_help_and_exit_error
      fi
      artifact_name=$2
      shift 2
      ;;
    --dest-dir | -d)
      if [ -z "$2" ]; then
        show_help_and_exit_error
      fi
      dest_dir=$2
      shift 2
      ;;
    --output-path | -o)
      if [ -z "$2" ]; then
        show_help_and_exit_error
      fi
      output_path=$2
      shift 2
      ;;
    -h | --help)
      show_help
      exit 0
      ;;
    --)
      passthrough=1
      shift
      ;;
    -*)
      echo "Error: unsupported option $1"
      show_help_and_exit_error
      ;;
    *)
      if [ -n "$file_tree" ]; then
        echo "File tree already specified. Unrecognized argument \"$1\""
        show_help_and_exit_error
      fi
      file_tree="$1"
      shift
      ;;
  esac
done

if [ -z "${artifact_name}" ]; then
  echo "Artifact name not specified. Aborting."
  show_help_and_exit_error
fi

if [ -z "${device_type}" ]; then
  echo "Device type not specified. Aborting."
  show_help_and_exit_error
fi

if [ -z "${file_tree}" ]; then
  echo "File tree not specified. Aborting."
  show_help_and_exit_error
fi

# Check dest-dir is an absolute path
case $dest_dir in
  /*)
    ;;
  *)
    echo "Destination dir must be an absolute path. Aborting"
    exit 1
  ;;
esac

if [ -d "${file_tree}" ]; then
  tar -cf ${update_files_tar} -C "${file_tree}" .
else
  echo "Error: \"${file_tree}\" is not a directory or does not exit. Aborting."
  exit 1
fi

find $file_tree -type f | sed "s|^$file_tree/||" > $manifest_file

# Create permissions file in plain text
stat -c %a "${file_tree}" > $permissions_file

# Create dest_dir file in plain text
echo "$dest_dir" > $dest_dir_file

mender-artifact write module-image \
  -T dir-overlay \
  -t $device_type \
  -o $output_path \
  -n $artifact_name \
  -f $update_files_tar \
  -f $dest_dir_file \
  -f $manifest_file \
  -f $permissions_file \
  $passthrough_args

rm $update_files_tar
rm $dest_dir_file
rm $manifest_file
rm $permissions_file

echo "Artifact $output_path generated successfully:"
mender-artifact read $output_path

exit 0
